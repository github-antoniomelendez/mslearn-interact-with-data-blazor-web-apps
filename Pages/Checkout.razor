@page "/checkout"
@using BlazingPizza.Data
@using BlazingPizza.Services
@inject OrderState OrderState
@inject HttpClient HttpClient
@inject NavigationManager NavigationManager
@implements IDisposable

<div class="main">
    <EditForm EditContext=editContext OnValidSubmit=PlaceOrder>
        <div class="checkout-cols">
            <div class="checkout-order-details">
                <h4>Review order</h4>
                <OrderReview Order="Order" />
            </div>

            <div class="checkout-delivery-address">
                <h4>Deliver to...</h4>
                <AddressEditor Address="Order.DeliveryAddress" />
            </div>
        </div>

        <button class="checkout-button btn btn-warning" type="submit" disabled=@isError>
            Place order
        </button>

        <ValidationSummary />
        <DataAnnotationsValidator />
    </EditForm>
</div>

@code {
    Order Order => OrderState.Order;

    private EditContext editContext;
    private bool isError;

    protected override void OnInitialized()
    {
        // Initialize EditContext with the delivery address
        editContext = new(Order.DeliveryAddress);
        // Subscribe to field changes to update validation state
        editContext.OnFieldChanged += HandleFieldChanged;

        // Initial validation check
        isError = !editContext.Validate();
    }

    private void HandleFieldChanged(object sender, FieldChangedEventArgs e)
    {
        // Update the isError flag whenever a field changes
        isError = !editContext.Validate();
        StateHasChanged();
    }

    private async Task PlaceOrder()
    {
        var response = await HttpClient.PostAsJsonAsync(
        NavigationManager.BaseUri + "orders",
        OrderState.Order
        );

        var newOrderId = await response.Content.ReadFromJsonAsync<int>();
        OrderState.ResetOrder();
        NavigationManager.NavigateTo($"myorders/{newOrderId}");
    }

    public void Dispose()
    {
        // Unsubscribe from field changes when the component is disposed
        editContext.OnFieldChanged -= HandleFieldChanged;
    }
}